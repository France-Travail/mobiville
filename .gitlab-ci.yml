stages:
  - build
  - deploy

.build_front_src:
  stage: build
  image: node:12.18.0
  script:
    # On construit l'image docker du composant front et on la sauvegarde dans le registry gitlab
    - (which yarn || npm i -g yarn@1.15.2)
    - cd ./front
    - yarn install 
    - yarn run build && cp -RT build dist
  artifacts:
    paths:
      - ./front/dist 
  only:
    refs:
      - master
    # changes:
    #   - ./front/**/*

build_liv_front_on_recette:
  stage: build
  image: node:12.18.0
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client 
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    # On minifie les src node ds le livrable dist
    - (which yarn || npm i -g yarn@1.15.2)
    - cd ./front
    - yarn install 
    - yarn run build && cp -RT build dist
    # On livre le livrable dist sur le 
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_RECETTE "mkdir -p $WORKDIR_SERVER/nginx/front"
    - scp -o StrictHostKeyChecking=no -r ./dist gitlab@$IP_RECETTE:$WORKDIR_SERVER/nginx/front
  only:
    refs:
      - master
    # changes:
    #   - ./front/**/*

.liv_front_on_recette:
  stage: liv
  needs: [build_front_src]
  dependencies:
    - build_front_src
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client 
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_RECETTE "mkdir -p $WORKDIR_SERVER/nginx/front"
    # On récupère l'artifact du build et on l'envoie sur le serveur de recette
    - scp -o StrictHostKeyChecking=no -r ./front/dist gitlab@$IP_RECETTE:$WORKDIR_SERVER/nginx/front
  only:
    refs:
      - master
    # changes:
    #   - ./front/**/*
  when: on_success # s'exécutera uniquement si le job `build_front` passe
    # rules:
  #   - if: '$CI_COMMIT_BRANCH == "master"'
  #     changes:
  #       - front/**/*

build_api_image:
  stage: build 
  image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
  script:
    # On construit l'image docker du composant front et on la sauvegarde dans le registry gitlab
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfile_api --destination $CI_REGISTRY_IMAGE:api
  only:
    refs:
      - master
    # changes:
    #   - ./api/**/*

deploy_application_on_recette:
  stage: deploy
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq openssh-client 
    # add SSH_PRIVATE_KEY in agent store
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.yml docker-compose.recette.yml gitlab@$IP_RECETTE:$WORKDIR_SERVER
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_RECETTE "mkdir -p $WORKDIR_SERVER/nginx"
    - scp -o StrictHostKeyChecking=no nginx/recette.conf gitlab@$IP_RECETTE:$WORKDIR_SERVER/nginx/
    - ssh -o StrictHostKeyChecking=no gitlab@$IP_RECETTE "
                cd $WORKDIR_SERVER &&
                echo -e 'DATABASE_URL=$DATABASE_URL\nMYSQL_DATABASE=$MYSQL_DATABASE\nMYSQL_USER=$MYSQL_USER\nMYSQL_PASSWORD=$MYSQL_PASSWORD' > .env &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml stop && 
                docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
                docker-compose -f docker-compose.yml -f docker-compose.recette.yml up -d"
  only:
    refs:
      - master
  when: on_success # s'exécutera uniquement si le job `build` passe
